{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","res","data","id","updatedPerson","put","newPerson","post","delete","Notification","message","className","Filter","props","onChange","handleSearch","value","search","PersonForm","onSubmit","handleSubmit","newName","handleChange","newNumber","handleNumberChange","type","Persons","toShow","map","person","key","name","number","onClick","handleDelete","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearch","errorMessage","setErrorMessage","useEffect","personService","console","log","length","filter","toLowerCase","includes","e","target","preventDefault","found","numberExist","personID","forEach","alert","setTimeout","concat","window","confirm","deletedPerson","p","catch","err","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.4e308c53.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"https://calm-ravine-30658.herokuapp.com/api/persons\";\n\nconst getAll = () => {\n  const result = axios.get(baseUrl);\n  return result.then((res) => res.data);\n};\n\nconst updatePerson = (id, updatedPerson) => {\n  const result = axios\n    .put(`${baseUrl}/${id}`, updatedPerson)\n    .then((res) => res.data);\n  return result;\n};\n\nconst postPerson = (newPerson) => {\n  const result = axios.post(baseUrl, newPerson);\n\n  return result.then((res) => res.data);\n};\n\nconst deletePerson = (id) => {\n  const result = axios.delete(`${baseUrl}/${id}`);\n  return result;\n};\n\nexport default {\n  getAll,\n  updatePerson,\n  postPerson,\n  deletePerson,\n};\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  return (\n    <div>\n      <p className=\"error\">{message}</p>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\n\nconst Filter = (props) => (\n  <input onChange={props.handleSearch} value={props.search} />\n);\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.handleSubmit}>\n    <div>\n      <label>Name: </label>{\" \"}\n      <input value={props.newName} onChange={props.handleChange} />\n    </div>\n    <div>\n      <label>Number: </label>\n      <input value={props.newNumber} onChange={props.handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nconst Persons = (props) => (\n  <div>\n    {props.toShow.map((person) => (\n      <div key={person.name}>\n        <p>\n          {person.name} {person.number}\n        </p>\n        <button onClick={() => props.handleDelete(person.id)}>delete</button>\n      </div>\n    ))}\n  </div>\n);\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [search, setNewSearch] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then((res) => setPersons(res));\n  }, []);\n\n  console.log(\"render\", persons.length, \"persons\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n    let found;\n    let numberExist;\n    let personID;\n    persons.forEach((person) => {\n      if (person.name.toLowerCase() === newName.toLowerCase()) {\n        alert(`${newName} is already added to phonebook`);\n        if (person.number !== newPerson.number) {\n          found = true;\n          numberExist = true;\n          personID = person.id;\n          return;\n        }\n        found = true;\n      }\n    });\n    console.log(persons);\n    if (found && numberExist) {\n      if (\n        window.confirm(\n          `${newPerson.name} is already added to the phonebook. Replace the old number with a new one?`\n        )\n      ) {\n        personService\n          .updatePerson(personID, newPerson)\n          .then((res) => personService.getAll().then((res) => setPersons(res)));\n      }\n      return;\n    }\n\n    if (found) {\n      setErrorMessage(`${newPerson.name} already exists.`);\n      setTimeout(() => setErrorMessage(null), 5000);\n      return;\n    }\n\n    personService.postPerson(newPerson).then((res) => {\n      console.log(res);\n      setPersons(persons.concat(res));\n      setNewName(\"\");\n      setNewNumber(\"\");\n      setErrorMessage(`${newPerson.name} was added to phonebook.`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    });\n  };\n\n  const handleChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleSearch = (e) => {\n    setNewSearch(e.target.value);\n  };\n\n  const handleDelete = (id) => {\n    let deletedPerson = persons.filter((p) => p.id === id);\n    console.log(deletedPerson);\n    if (window.confirm(`Do you really want to delete entry?`)) {\n      personService\n        .deletePerson(id)\n        .then((res) => {\n          setPersons(persons.filter((p) => p.id !== id));\n        })\n        .catch((err) => {\n          setErrorMessage(`${deletedPerson} was already deleted from server`);\n          setTimeout(() => setErrorMessage(null), 5000);\n        });\n      setErrorMessage(`${deletedPerson[0].name} was deleted from the server.`);\n      setTimeout(() => setErrorMessage(null), 5000);\n    }\n  };\n\n  const toShow = persons.filter((person) =>\n    person.name.toLowerCase().includes(search.toLowerCase())\n  );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter search={search} handleSearch={handleSearch} />\n      <PersonForm\n        handleChange={handleChange}\n        handleNumberChange={handleNumberChange}\n        handleSubmit={handleSubmit}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons toShow={toShow} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}